/*
	NATIVE CSS VARIABLES
	Experimenting with "Custom property values with defaults"
	https://lea.verou.me/2021/10/custom-properties-with-defaults/

	:root {
		--variable-name: value;
	}

	element {
		--_variable-name: var(--variable-name, fallback-if-no-such-variable);
		property: var(--_variable-name);
	}
*/
:root {
	/* Modular scale: Standardised scaling and sizing based on a ratio from the root element */
	--ratio:                   1.25;
	--s-5:                     calc(var(--s-4) / var(--ratio));
	--s-4:                     calc(var(--s-3) / var(--ratio));
	--s-3:                     calc(var(--s-2) / var(--ratio));
	--s-2:                     calc(var(--s-1) / var(--ratio));
	--s-1:                     calc(var(--s0) / var(--ratio));
	--s0:                      1rem;
	--s1:                      calc(var(--s0) * var(--ratio));
	--s2:                      calc(var(--s1) * var(--ratio));
	--s3:                      calc(var(--s2) * var(--ratio));
	--s4:                      calc(var(--s3) * var(--ratio));
	--s5:                      calc(var(--s4) * var(--ratio));

	/* Generic measures */
	--gap:                     var(--s1);
	--ps-letter-spacing:       40; /* the photoshop value on "letter spacing" for VCA's habitual uppercase text styles */
	--measure:                 auto; /* the maximum readable width of any text */

	/* Animation speeds */
	--fast:                    0.3s;
	--slow:                    0.6s;
	--very-slow:               1.3s;

	/* Text sizes based on the Modular Scale (gaps too can be based on that) */
	--font-size-diminished:    var(--s-1, 0.875rem); /* e.g., footer text or footnote */
	--font-size-base:          var(--s0, 1rem); /* Standard font size, equiv of 16px by default */
	--font-size-promoted:      var(--s2, 1.2rem); /* e.g., an intro paragraph */
	--font-size-heading-small: var(--s3, 1.4rem);
	--font-size-heading:       var(--s4, 1.6rem);
	--font-size-heading-large: var(--s5, 2rem);

	/* Form related */
	--input-padding:           0.5em 1em;
	--border-width:            2px;
	--border-radius:           0;
	--border-colour:           hsl(var(--black) / 0.1);
	--caret-colour:            hsl(var(--ui-green));

	/* Colour / theme related */
	--ui-green:                103 46% 48%;
	--ui-red:                  17 46% 48%;
	--black:                   0 0% 0%;
	--white:                   0 0% 100%;
}

/* CSS Reset */
*, *::before, *::after {
	box-sizing:      border-box;
	max-inline-size: var(--measure); /* By default nothing can exceed the measure */
}

html, body, div, header, nav, main, footer, picture, img, video { /* Special things that can exceed the measure */
	max-inline-size: none;
}

body, h1, h2, h3, h4, h5, h6, p, li, figure, figcaption, blockquote, dl, dd {
	margin: 0;
}

body {
	min-height:     100vh;
	text-rendering: optimizeLegibility;
	line-height:    1.5;
}

img {
	display: block; max-width: 100%;
}

input, button, textarea, select {
	font: inherit;
}

/* Utility Classes */
.font-size\:diminished { font-size: var(--font-size-diminished) !important; }
.font-size\:base { font-size: var(--font-size-base) !important; }
.font-size-promoted { font-size: var(--font-size-promoted) !important; }
.font-size\:heading-small { font-size: var(--font-size-heading-small) !important; }
.font-size\:heading { font-size: var(--font-size-heading) !important; }
.font-size\:heading-large { font-size: var(--font-size-heading-large) !important; }

/*
	layouts: stack
	https://every-layout.dev/layouts/stack/
	Simple standardised vertical spacing of elements.
	The stack does nothing other than insert correct vertical margins for direct child elements.
*/
.l_stack {
	--_gap-small: var(--s0, 1rem);
	--_gap-large: var(--s1, 1.25rem);
	display:      flex; flex-direction: column; justify-content: flex-start;
}
.l_stack > * {
	margin-block: 0;
}
:where(.l_stack, .l_stack-large) > * + * { /* the gap between stack elements for regular and large stacks */
	margin-block-start: var(--_gap-large, 1.25rem);
}
.l_stack-small > * + * { /* the gap between stack elements for small stacks */
	margin-block-start: var(--_gap-small, 1rem);
}
.l_stack:only-child {
	/* Where the Stack is the only child of its parent, nothing forces it to stretch. A height of 100% ensures the Stack's height matches the parent's and any split can occur */
	block-size: 100%;
}
.l_stack > .split-stack { /* elements after are grouped at the bottom of the stack, if there is spare space */
	margin-block-end: auto;
}

/*
	layouts: box
	https://every-layout.dev/layouts/box/
	Makes a layout box with standardised padding, borders, backgrounds, colours
*/
.l_box {
	--_border-width:  var(--border-width, 1px);
	--_color-light:   hsl(var(--white) / 1);
	--_color-dark:    hsl(var(--black) / 1);
	padding:          var(--s0); border: var(--_border-width) solid;
	background-color: var(--_color-light); color: var(--_color-dark);
}
.l_box * {
	color: inherit;
}
.l_box.box-invert {
	color: var(--_color-light); background-color: var(--_color-dark);
}

/*
	layouts: center
	https://every-layout.dev/layouts/center/
	Centres an element in respect to its container.
	Optional gutters.
	Optional centering of child elements.
*/
.l_center {
	--_max-width:  var(--measure, 72ch);
	box-sizing:    content-box;
	margin-inline: auto; max-inline-size: var(--_max-width);
}
.l_center.center-gutters {
	padding-inline-start: var(--s0); padding-inline-end: var(--s0);
}
.l_center.center-children {
	display: flex; flex-direction: column; align-items: center;
}

/*
	layouts: cluster
	https://every-layout.dev/layouts/cluster/
	Cluster components suit any groups of elements that differ in length and are liable to wrap.
	Use the Cluster to align any groups of horizontally laid out elements to the left or right, or in the center.
*/
.l_cluster {
	display:         flex; flex-wrap: wrap; gap: var(--s0, 1rem);
	justify-content: flex-start; align-items: center;
}
.l_cluster.cluster-separate {
	justify-content: space-between;
}

/*
	layouts: sidebar
	https://every-layout.dev/layouts/sidebar/
	A 100% wide linear column until there is room for a sidebar.
	Sidebar can be intrinsic or explicit width.
*/
.l_with-sidebar {
	--_gap:  var(--s3, 3rem);
	display: flex; flex-wrap: wrap; gap: var(--_gap);
}
.l_with-sidebar.sidebar-left > :first-child {
	flex-grow: 1; /* Intrinsic width of whatever is in the div */
}
.l_with-sidebar.sidebar-left > :last-child {
	flex-basis: 0; /* Grow from nothing */
	flex-grow:  999;
	min-width:  50%; /* Wrap when the elements are of equal width */
}
.l_with-sidebar.sidebar-left.sidebar-fixed-width > :first-child {
	flex-basis: 10rem; /* The width when the sidebar _is_ a sidebar */
}
.l_with-sidebar.sidebar-right > :first-child {
	flex-basis: 0; /* Grow from nothing */
	flex-grow:  999;
	min-width:  50%; /* Wrap when the elements are of equal width */
}
.l_with-sidebar.sidebar-right > :last-child {
	flex-grow: 1; /* Intrinsic width of whatever is in the div */
}
.l_with-sidebar.sidebar-right.sidebar-fixed-width > :last-child {
	flex-basis: 10rem; /* The width when the sidebar _is_ a sidebar */
}

/* layout: switcher */
.l_switcher {
	--threshold: 20em; /* When to switch between a horizontal and vertical layout */
	display:     flex; flex-wrap: wrap; gap: var(--s0, 1rem);
}

.l_switcher > * {
	flex-grow: 1; flex-basis: calc((var(--threshold) - 100%) * 999);
}

.l_switcher > :nth-last-child(n+ 4),
.l_switcher > :nth-last-child(n+ 4) ~ * { /* The maximum number of items permitted for a horizontal layout */
	flex-basis: 100%;
}

/* layout: cover */
.l_cover {
	display:    flex; flex-direction: column;
	min-height: 100vh; padding: var(--s1);
}

.l_cover > * {
	margin-top: var(--s1); margin-bottom: var(--s1);
}

.l_cover > :first-child:not(.centered) {
	margin-top: 0;
}

.l_cover > :last-child:not(.centered) {
	margin-bottom: 0;
}

.l_cover > .centered {
	margin-top: auto; margin-bottom: auto;
}

/* layout: grid */
.l_liquid-grid {
	--minimum-width: 250px;
	display:         grid; grid-gap: var(--s0, 1rem);
}

@supports (width: min(250px, 100%)) {
	.l_liquid-grid {
		grid-template-columns: repeat(auto-fit, minmax(min(var(--minimum-width, 200px), 100%), 1fr));
	}
}
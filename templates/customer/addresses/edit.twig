{# NOTE:
	- This is actually an ADD and EDIT page for a singular address
	- This template makes most sense in the Customer section, but it does rely on the templates that are in the `online-store` folder for the rendering of addresses. It's a bit of a pain because "Customer" is not a thing just for Commerce (it's the User stuff, essentially), but Addresses are.
#}
{% if not currentUser %}
	{% exit 404 %}
{% endif %}

{% import '_macros/helpers.twig' as helpers -%}
{% import '_macros/images.twig' as imageHelper %}

{%- extends "_layout.twig" -%}
{%- set htmlClass = null -%}

{%- block content %}<!-- Template: {{ _self }}.twig -->
	{% css %}
		:root {
			--accentColour : var(--brandOrange);
		}
	{% endcss %}

	{# Prepare for the rest of the template #}
	{% set addressId   = craft.app.request.queryParam('addressId') %}
	{% set redirect    = craft.app.request.queryParam('redirect') %}
	{% set countryCode = craft.app.request.queryParam('countryCode') %}

	{% if not address is defined %}
		{% if addressId %}
			{% set address = collect(currentUser.addresses).firstWhere('id', addressId) %}
			{% if not address %}
				{% exit 404 %}
			{% endif %}
		{% else %}
			{% set address = create({
				class: 'craft\\elements\\Address',
				ownerId: currentUser.id,
				countryCode: countryCode ?? 'US'
			}) %}
		{% endif %}
	{% endif %}

	<main id="main">
		<div class="rowBreadcrumbs l_constrain">
			{% include '_partials/breadcrumbs' with {
				crumbs: [
					{ url: '/customer', title: 'Customer' },
					{ url: '/customer/addresses', title: 'Addresses' },
				]
			} %}
		</div>

		<div class="rowPageIntroduction l_constrain">
			<div class="wrapper">
				<h1>Your Saved Addresses</h1>

				<div class="pageIntroduction">
					{% if addressId %}
						{{- 'Edit this address'|t -}}
					{% else %}
						{{- 'Add a new address'|t -}}
					{% endif %}
				</div>
			</div>
		</div>

		<div class="rowForms l_constrain l_commerceMultiColumn">
			<div class="wrapper">
				<div class="cmc-col1">
					<form method="post" action="">
						{{ csrfInput() }}
						{{ actionInput('users/save-address') }}
						{{ redirectInput(redirect ?: 'customer/addresses') }}

						{% if addressId %}
							{{ hiddenInput('addressId', addressId) }}
						{% endif %}

						{{ include('online-store/_private/address/fields.twig', {
							address               : address,
							showLabelField        : true,
							showPrimaryCheckboxes : true,
						}) }}
						{{ hiddenInput('ownerId', currentUser.id) }}

						<div class="formActions">
							{{ tag('button', {
								type: 'submit',
								text: 'Save Address'|t,
								class: 'uc_button'
							}) }}

							<a href="{{ redirect ? '/' ~ redirect : url('customer/addresses') }}">
								{{- 'Cancel'|t -}}
							</a>
						</div>
					</form>
				</div>

				<div class="cmc-col2">
					{% if currentUser %}
						{{ include('customer/_includes/navigation.twig') }}
					{% endif %}
				</div>
			</div>
		</div>
	</main>
{% endblock %}

{% js at head %}
	{# get all the states in the system as a JSON blob #}
	let states = {{ craft.commerce.store.getStore().getAdministrativeAreasListByCountryCode()|json_encode|raw }};

	{# Build a JSON object from all avaialble country codes, storing all of the Craft address fields that are used by the system for that country code #}
	{% set usedFields = {} %}
	{% for countryCode in craft.app.addresses.getCountryRepository().getAll()|keys %}
		{% set usedFields = usedFields|merge({ (countryCode): craft.app.addresses.getUsedFields(countryCode)|merge([
			'fullName',
			'latLong',
			'organizationTaxId',
			'organization',
			'countryCode',
		]) }) %}
	{% endfor %}

	let usedAddressFieldsByCountryCode = {{ usedFields|json_encode|raw }};
	console.log('usedAddressFieldsByCountryCode:');
	console.log(usedAddressFieldsByCountryCode);

	function hideAddressFields(selectorTemplate) {
		{# note that 'placeholer' is a literal string passed to this function which will swap out. There is no mark-up anywhere that is the 'placeholder' class, it becomes substituted out in the selector. I can only guess why. #}
		console.log(`hideAddressFields(${selectorTemplate})`);

		const fields = document.querySelectorAll('.' + selectorTemplate.replace('placeHolder', 'js-address-field'));
		console.log({fields});
		if (!fields.length) {
			return;
		}

		for (let i = 0; i < fields.length; i++) {
			fields[i].classList.add('uc_hide-for-everyone');
		}
	}

	function showAddressField(fieldName, selectorTemplate) {
		{# note that 'placeholer' is a literal string passed to this function which will swap out. There is no mark-up anywhere that is the 'placeholder' class, it becomes substituted out in the selector. I can only guess why. #}
		console.log(`showAddressField(${fieldName}, ${selectorTemplate})`);

		const closestSelector = selectorTemplate;
		const field = document.querySelector('#' + selectorTemplate.replace('placeHolder', fieldName));
		console.log({field});
		if (!field) {
			return;
		}

		const fieldWrapper = field.closest('.' + closestSelector.replace('placeHolder', 'js-address-field'));
		console.log({fieldWrapper});
		if (!fieldWrapper) {
			return;
		}

		fieldWrapper.classList.remove('uc_hide-for-everyone');
	}
{% endjs %}
